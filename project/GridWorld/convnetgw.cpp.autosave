#include "convnetgw.h"

ConvNetGW::ConvNetGW()
{

}

ConvNetGW::ConvNetGW(int size, int nConv1, int nConv2, int nfc):
    size(size),Conv1(nConv1), nConv2(nConv2), nfc(nfc)
{
    conv1 = register_module("conv1",Conv2d(3,16,3,1,1));
    conv2 = register_module("conv2",Conv2d(16,32,3,1,1));
    fc = register_module("fc",Linear(2*size*size,nfc));
    
}

Tensor ConvNetGW::forward(Tensor x)
{
    x = relu(max_pool2d(conv1->forward(x),2));
    x = relu(max_pool2d(conv2->forward(x),2));
    x = x.view({-1,2*size*size});
    x = relu(fc->forward(x));
}

Tensor ConvNetGW::actorOutput(Tensor x)
{
    x = this->forward(x);
    return softmax(actor->forward(x),1);    
}

Tensor ConvNetGW::criticOutput(Tensor x)
{
    x = this->forward(x);
    return critic->forward(x);
}